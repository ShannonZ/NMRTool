/*-*-C++-*-********************************************************
 *
 * $Source: /sc/CvsTree/sc/gen/src/prg/makeau/inc/libQTPutil,v $
 *
 * Copyright (c) 2000
 * BRUKER SA
 * F-67166 Wissembourg cedex, France
 *
 * All Rights Reserved
 *
 * $Id: libQTPutil,v 1.10 2007/12/05 16:34:07 ge Exp $
 *
 *******************************************************************
 */

#ifndef LIBQTPUTIL_H

#define LIBQTPUTIL_H

#include <lib/libQTP.h>

typedef struct
{
	double frequency;
	double shift;
	float intensity;
} TQTPRealPoint;

void GetQTPRealSpectrum( const char *curdat, TQTPRealPoint **point, int *size )
{
	FILE *pfd;
	char fname[BUFSIZ/2];
	int i, si, *raw_data;
	float hzppt;
	double sw_h, sfo1, bf1, sf; 
	
	*point = NULL;
	*size = -1;

	SETLIBQTPERROR( 0 );

	GETCURDATA

	FETCHPARS( "SI", &si );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not fetch SI !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	FETCHPARS( "SW_h", &sw_h );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not fetch SW_h !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	FETCHPARS( "HZpPT", &hzppt );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not fetch HZpPT !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	FETCHPARS( "SFO1", &sfo1 );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not fetch SFO1 !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	sfo1 = sfo1 * 1e6;

	FETCHPARS( "BF1", &bf1 );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not fetch BF1 !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	FETCHPARS( "SF", &sf );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not fetch SF !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	sf = sf * 1e6;
			
	strcpy( fname, PROCPATH("1r"));

	pfd = fopen( fname, "r" );
	if( pfd == NULL ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not open [%s] !", fname );
		SETLIBQTPERROR( 1 );
		return;
	}

	raw_data = (int *)malloc(si*sizeof(int));

	if( fread( raw_data, sizeof(int), si, pfd ) < si )
	{
		ADDQTPLOGMESSAGE( "GetQTPRealSpectrum() : could not read real points !" );
		free( raw_data );
		SETLIBQTPERROR( 1 );
		return;
	}

	*point = (TQTPRealPoint *)malloc(si*sizeof(TQTPRealPoint));

	for( i = 0; i < si; i++ )
	{
		(*point)[i].frequency = (sfo1-sf+sw_h/2)-i*hzppt;
		(*point)[i].shift = (*point)[i].frequency/bf1;
		(*point)[i].intensity = (float)raw_data[i];
	}

	*size = si;

	free( raw_data );
}

void GetQTPHigherPeak( TQTPRealPoint *point, int size, int *index )
{
	int i,idx;

	SETLIBQTPERROR( 0 );

	*index = 0;
	idx = 0;

	for( i = 0; i < size; i++ )
		if( point[i].intensity > point[idx].intensity )	idx = i;

	*index = idx;
}

void GetQTPSortedPeaks( TQTPRealPoint *point, int size, int *peak, int p_max  )
{
	int i, p, *peak_i, i_tmp, go_up, go_on;

	SETLIBQTPERROR( 0 );
	
	peak_i = (int *)malloc(size*sizeof(int));

	/* searching all the peaks */

	i = 0;
	p = 0;
	go_up = 0;
	for( i = 0; i < (size-1); i++ )
		if( point[i+1].intensity > point[i].intensity ) go_up = 1;
		else if( point[i+1].intensity < point[i].intensity && go_up == 1 ) 
		{
			go_up = 0;
			peak_i[p] = i;
			p++;	
		}

	/* sorting found peaks */

	go_on = 1;
	while( go_on )
	{
		go_on = 0;
		for( i = 0; i < (p-1); i++ )
			if( point[peak_i[i+1]].intensity > point[peak_i[i]].intensity )
			{
				i_tmp = peak_i[i];
				peak_i[i] = peak_i[i+1];
				peak_i[i+1] = i_tmp;
				go_on = 1;
			}
	}

	/* return the p_max first peaks */

	for( p = 0; p < p_max; p++ ) peak[p] = peak_i[p];

	free( peak_i );
}

void GetQTPAmplitude( const char *curdat, int fidcount, int begin, int end, double *dAmpl )
{
	FILE *pfd;
	int fidsize,byteorder,p,f,*fid;
	double dReal,dImag;
	char text[256];

	SETLIBQTPERROR( 0 );

	GETCURDATA

	FETCHPARS( "TD", &fidsize )
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPAmplitude : could not fetch TD !" );
		SETLIBQTPERROR( 1 );
		return;
	}

    	FETCHPARS( "BYTORDA", &byteorder );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPAmplitude : could not fetch BYTORDA !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	if( begin < 0 || begin > fidsize ) begin = 0;
	if( end < 0 || end > fidsize ) end = fidsize;

	if( fidcount > 1 )
	    strcpy( text, ACQUPATH("ser"));
	else
	    strcpy( text, ACQUPATH("fid"));

	pfd = fopen( text, "r" );
	if( pfd == NULL ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPAmplitude : could not open [%s] !", text );
		SETLIBQTPERROR( 1 );
		return;
	}

	fid = (int *)malloc( fidsize*sizeof(int) );

	for( f = 0; f < fidcount; f++ )
	{
		dReal = 0.0;
		dImag = 0.0;
	
		if( fread( fid, sizeof(int), fidsize, pfd ) < fidsize )
		{
			ADDQTPLOGMESSAGE( "GetQTPAmplitude : could not read fid#%d points !", f );
			fclose( pfd );
			free( fid );
			SETLIBQTPERROR( 1 );
			return;
		}
    		local_swap4( fid, fidsize * sizeof(int), byteorder );
	
		for( p = begin; p < end/2; p++ )
		{
			dReal = dReal + (double)fid[2*p];
			dImag = dImag + (double)fid[2*p+1];
		}

		dAmpl[f] = sqrt( pow( dReal, 2.0 ) + pow( dImag, 2.0 ) );
	}

	fclose( pfd );
	free( fid );
}

void GetQTPPhase( const char *curdat, int fidcount, int begin, int end, double *dPhase )
{
	FILE *pfd;
	int fidsize,byteorder,p,f,*fid;
	double dReal,dImag;
	char text[256];
	
	SETLIBQTPERROR( 0 );

	GETCURDATA

	FETCHPARS( "TD", &fidsize )
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPPhase : could not fetch TD !" );
		SETLIBQTPERROR( 1 );
		return;
	}
    
	FETCHPARS( "BYTORDA", &byteorder );
	if( AUERR ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPPhase : could not fetch BYTORDA !" );
		SETLIBQTPERROR( 1 );
		return;
	}

	if( begin < 0 || begin > fidsize ) begin = 0;
	if( end < 0 || end > fidsize ) end = fidsize;

	if( fidcount > 1 )
	    strcpy( text, ACQUPATH("ser"));
	else
	    strcpy( text, ACQUPATH("fid"));
	
	pfd = fopen( text, "r" );
	if( pfd == NULL ) 
	{
		ADDQTPLOGMESSAGE( "GetQTPPhase : could not open [%s] !", text );
		SETLIBQTPERROR( 1 );
		return;
	}

	fid = (int *)malloc( fidsize*sizeof(int) );
	
	for( f = 0; f < fidcount; f++ )
	{	
		dReal = 0.0;
		dImag = 0.0;
	
		if( fread( fid, sizeof(int), fidsize, pfd ) < fidsize )
		{
			ADDQTPLOGMESSAGE( "GetQTPPhase : could not read fid#%d points !", f );
			fclose( pfd );
			free( fid );
			SETLIBQTPERROR( 1 );
			return;
		}
    		local_swap4( fid, fidsize * sizeof(int), byteorder );
	
		for( p = begin; p < end/2; p++ )
		{
			dReal = dReal + (double)fid[2*p];
			dImag = dImag + (double)fid[2*p+1];
		}
	
		dPhase[f] = atan2( dImag, dReal ) * 180.0 / 3.141592653589793238462643;
		if( dPhase[f] < 0.0 ) dPhase[f] = 360.0 + dPhase[f];
	}

	fclose( pfd );
	free( fid );
}

void GetQTPStatistics( int size, double *values, double *avg, double *stdgap )
{
	int i;

	*avg = 0.0;
	for( i = 0; i < size; i++ )
		*avg = *avg + values[i];
	*avg = *avg/size;

	*stdgap = 0.0;
	for( i = 0; i < size; i++ )
		*stdgap = *stdgap + pow( (values[i]-*avg), 2 );
	*stdgap = *stdgap/size;
	*stdgap = sqrt( *stdgap );
}

#define GETQTPREALSPECTRUM( point, size ) \
		GetQTPRealSpectrum( curdat, point, size );
#define GETQTPHIGHERPEAK( point, size, index ) \
		GetQTPHigherPeak( point, size, index );
#define GETQTPSORTEDPEAKS( point, size, peak, p_max ) \
		GetQTPSortedPeaks( point, size, peak, p_max );
#define GETQTPAMPLITUDE( count, begin, end, values ) \
		GetQTPAmplitude( curdat, count, begin, end, values );
#define GETQTPPHASE( count, begin, end, values ) \
		GetQTPPhase( curdat, count, begin, end, values );
#define GETQTPSTATISTICS( count, values, avg, stdgap ) \
		GetQTPStatistics( count, values, avg, stdgap );

#endif
