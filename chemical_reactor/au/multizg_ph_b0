/*** ^^A -*-C++-*- **********************************************/
/*	multizg_ph_b0		          			*/
/****************************************************************/
/*	Short Description :					*/
/*	Performs multiple acquisitions on increasing expnos.	*/
/*      Set the polariser field value from CNST31               */
/****************************************************************/
/*	Keywords :						*/
/*	serial acquisitions					*/
/****************************************************************/
/*	Description/Usage :					*/
/*	This AU program performs multiple acquisitions on	*/
/*	increasing expnos. If datasets do not yet exist, the	*/
/*	current dataset and its parameters are copied. If the	*/
/*	data sets already exist, then the experiments are	*/
/*	executed as they are.					*/
/*      The polariser field value for the polariser is set      */
/*      from pulse program constant name ex. CNST31 prior to    */
/*	execution of the experiment.       			*/
/*	Number of constant name CNST can be specified.		*/
/*	The total experiment time is estimated and printed out.	*/
/*	The number of experiments to be performed can be	*/
/*	specified on the command line :				*/
/*		xau multizg_ph_b0 <no of experiments>		*/
/*			 <field value> <field Increment value>	*/
/*      In this case the pulse program constant CNST31 will be	*/
/*	set to the field value prior to execution of the	*/
/*	experiment.						*/
/*	Thhe magnetic field of the parahydrogen polariser will  */
/*      be set by polarize command: #H1:GA=value		*/
/*								*/
/****************************************************************/
/*	Author(s) :						*/
/*	Name		: Henriette Brzozowski			*/
/*	Organisation	: Bruker BioSpin GmbH			*/
/*	Email		: henriette.brzozowski@Bruker-Biospin.de*/
/****************************************************************/
/*	Name		Date	Modification:			*/
/*      hb		120202  created 			*/
/*      hb		120313  added PULPROG and polarizer	*/
/* 				field value into title file	*/
/****************************************************************/
/*
$Id: multizg_ph_b0,v 1.2 2012/03/13 13:27:27 hb Exp $
*/

AUERR = multizg_ph_b0(curdat, cmd);
QUIT

#include <inc/exptUtil>
#include <inc/polariseUtil.vs3>


int multizg_ph_b0(const char* curdat, const char* cmd)
{
    TTY_DEVICE bphp;
    char resultExpected[PATH_MAX];
    char *envpnt, statusline[1024], message[1024], text[PATH_MAX+400];
    char *answer;
    int expTime, zgsafety;
    int ret;
    FILE *titlefp;

    char i1_str[20], polField_str[20], polFieldInc_str[20], pulseprog[80];
    int i1 = 0;
    int startExpno = expno;
    int i = 0, timeout = 40;
    char debugmessage[1024];
    char gaSet[128], constantVariable[28];
    int constantVariableIndex = 31;
    float polField, polFieldInc, endPolField, maxPolField=148;

    pulseprog[0] = 0;

    FETCHPAR( "CNST 31", &polField );
    polFieldInc=0.0;
    sprintf(constantVariable, "CNST %d", constantVariableIndex);

    if (*cmd == 0)
    {
	i1=10;
	GETINT("Enter number of experiments : ",i1);

	/* The polarizer field value for the polariser is set from
	   pulse program constant name, default is CNST 31.
	   This defines field value for the polarizer: ", constantVariable);
	*/
	GETINT("Enter number of pulse program constant name CNST.\n"
		"This defines field value for the polarizer: ", 
		 constantVariableIndex);
	sprintf(constantVariable, "CNST %d", constantVariableIndex);
	FETCHPAR( constantVariable, &polField );
	GETFLOAT("Enter Starting Polarizer Field : ",polField);
	GETFLOAT("Enter Field Increment : ",polFieldInc);
    }
    else
    {
	sscanf(cmd, "%s %s %s", i1_str, polField_str, polFieldInc_str);
	
	i1 = atoi(i1_str);
	polField = atof(polField_str);
	polFieldInc = atof(polFieldInc_str);
	(void)sprintf(text, "Number of experiments: %d\n"
		      "field: %.2f\nfieldIncrement: %.2f\n"
		      "Continue ? [y | n]",
		      i1, polField, polFieldInc );
	answer=Gets(text, "y");
	if ((answer == 0) || (answer[0]=='n'))
	    ABORT
    }

    endPolField=polField+(i1-1)*polFieldInc;
    if ((fabs(endPolField) > maxPolField) || (fabs(polField) > maxPolField))
    {
	sprintf(message, "Polarizer Field (%.2f - %.2f) Out Of Range\nLimit is %.2f",
		polField,endPolField,maxPolField);
	STOPMSG( message );
    }

    if (openbphp(&bphp) < 0)
    {
	Proc_err(DEF_ERR_OPT, "multizg_ph_b0: openbphp < 0");
	return -1;
    }

    expTime = 0;
    TIMES(i1)
      SETCURDATA
      expTime += CalcExpTime();
      STOREPAR(constantVariable, polField);     /* default is "CNST 31"  */
      if (DEBUG==1)
      {
	  (void)sprintf( message, "Set %s to %.2f\n", constantVariable, polField);
	  printf( message );
      }
      polField += polFieldInc;
      IEXPNO
    END
    DEXPNO
    if (DEBUG==1)
    { 
       (void)sprintf( message, "Created all Data sets for acquisition, finished with CNST %d of %.2f\n", 
		      constantVariableIndex, polField);    /* round(polField) ); */
       printf( message );
    }
    PrintExpTime(expTime, i1);
    /* Turn zg safety off if on. Turn it back on at the end. */
    envpnt = getenv("UXNMR_SAFETY");
    zgsafety = 0;
    if (envpnt != NULL)
    {
	if (strcasecmp(envpnt, "on") == 0)
	{
	    zgsafety = 1;
	    CPR_exec("env set UXNMR_SAFETY=off", WAIT_TERM);
	}
    }

    expno = startExpno;
    SETCURDATA
    TIMES(i1)
      (void) sprintf(statusline,"running experiment # %d", loopcount1+1);
      Show_status(statusline);

      /* Get field value for polarizer; construct polarizer command */
      FETCHPAR(constantVariable, &polField);    /* default read "CNST 31" */
      if (DEBUG==1)
      {
	  (void)sprintf( message, "\nTaken value of %.2f from CNST %d\n", polField, constantVariableIndex );
	  printf( message );
      }
      (void)sprintf( polCmnd, "#H1:GA=%.2f", polField);

      /* we expect polCmnd + OK */
      sprintf(resultExpected, "%s OK", polCmnd);

      /* Terminate command string with a CR character */
      strcat(polCmnd,"\r");

      if (DEBUG==1)
      {
	  (void)sprintf( message, "Set the command to be sent to the polarizer ( %s ) for the field %.2f\n", 
			 polCmnd, polField );
	  printf( message );
      }

      /* Set field on polarizer and check value is set before proceeding */
      /* gaSet is the value of the field as read from the polarizer */ 
      if(DEBUG==1)
      {
	  (void)sprintf( debugmessage, "\nValue to compare with response from polarizer set to %.2f\n", polField);
	  printf(debugmessage);
      }
      strcpy(gaSet, "");      /* init before read and compare */

      i=0;                  /* init for next expno experiment */
      while((strncmp(gaSet, resultExpected, strlen(resultExpected)-3) != 0) && ( i <= timeout ))
      {
	  (void) sprintf(statusline,"Setting polarizer field to %.2f Gauss", polField);
	  Show_status(statusline);

	  if ((i==0) && (ret = writeCmnd( &bphp, polCmnd)) <0 )    /* write to polarizer */
	      return -1;
	  
	  if (readResponse(&bphp, polResponse) <0)
	      return -1;

	  (void)sprintf(gaSet, "%s", polResponse);


	  if(DEBUG==1)
	  {
	      (void)sprintf( debugmessage, "\nComparing value read from polariser: %s with value sent: %s",
			     gaSet, polCmnd);
	      printf(debugmessage);
	  }
	  i++;

	  if (i==timeout)
	  {
	      (void)sprintf( debugmessage, "\nFailed to set polariser to field %s after %d attempts", 
			     polCmnd , timeout);
	      if (DEBUG==1)
		  printf(debugmessage);

	      STOPMSG( debugmessage );
	  }
      }

      (void) sprintf(statusline,"Successfully set polarizer field value to %.2f Gauss", polField);
 
      if(DEBUG==1)
      {
	  (void)sprintf( debugmessage, "\n%s, start ZG\n", statusline);
	  printf(debugmessage);
      }
      Show_status(statusline);

      /**************************************************************
       write PULPROG name and polarizer field value into title file
      ***************************************************************/
      if ((titlefp = fopen(PROCPATH("title"), "at")) == NULL)
      {
	  Proc_err(DEF_ERR_OPT, "Can't open %s\n%s",
		   PROCPATH("title"), strerror(errno));
	  return 0;
      }
      FETCHPAR("PULPROG", pulseprog)
      if(strlen(pulseprog)>0)
	  /*(void)fprintf(titlefp, "\nPULPROG: %s",  pulseprog);*/

      (void)fprintf(titlefp, "\nPolarizer field: %.2f Gauss\n", polField);

      fclose (titlefp);


      sleep(2);           
  
      ZG
      IEXPNO
    END
    DEXPNO

    if (zgsafety == 1)
	CPR_exec("env set UXNMR_SAFETY=on", WAIT_TERM);

    return 0;
}


